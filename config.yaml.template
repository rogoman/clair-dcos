# Copyright 2015 clair authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The values specified here are the default values that Clair uses if no configuration file is specified or if the keys are not defined.
clair:
  database:
    # Database driver
    type: pgsql
    options:
      # PostgreSQL Connection string
      # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
      source: host=<% .Env.POSTGRES_HOST %> port=<% .Env.POSTGRES_PORT %> dbname=<% .Env.POSTGRES_DATABASE %> user=<% .Env.POSTGRES_USER %> password=<% .Env.POSTGRES_PASSWORD %> sslmode=<% default .Env.POSTGRES_SSLMODE "disable" %> statement_timeout=<% default .Env.POSTGRES_TIMEOUT 60000 %>

      # Number of elements kept in the cache
      # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
      cachesize: <% default .Env.CACHE_SIZE 16384 %>

  api:
    # API server port
    port: <% .Env.PORT0 %>

    # Health server port
    # This is an unencrypted endpoint useful for load balancers to check to healthiness of the clair server.
    healthport: <% .Env.PORT1 %>

    # Deadline before an API request will respond with a 503
    timeout: <% default .Env.API_TIMEOUT_SECONDS 900 %>s

    # 32-bit URL-safe base64 key used to encrypt pagination tokens
    # If one is not provided, it will be generated.
    # Multiple clair instances in the same cluster need the same value.
    paginationkey:

    # Optional PKI configuration
    # If you want to easily generate client certificates and CAs, try the following projects:
    # https://github.com/coreos/etcd-ca
    # https://github.com/cloudflare/cfssl
    servername: <% default .Env.PKI_API_SERVER_NAME "" %>
    cafile: <% default .Env.PKI_API_CAFILE "" %>
    keyfile: <% default .Env.PKI_API_KEYFILE "" %>
    certfile: <% default .Env.PKI_API_CERTFILE "" %>

  updater:
    # Frequency the database will be updated with vulnerabilities from the default data sources
    # The value 0 disables the updater entirely.
    interval: <% default .Env.UPDATE_INTERVAL_HOURS 2 %>h

  notifier:
    # Number of attempts before the notification is marked as failed to be sent
    attempts: <% default .Env.NOTIFIER_ATTEMPTS 3 %>

    # Duration before a failed notification is retried
    renotifyinterval: <% default .Env.NOTIFIER_RENOTIFY_INTERVAL_HOURS 2 %>h

    http:
      # Optional endpoint that will receive notifications via POST requests
      endpoint: <% default .Env.NOTIFIER_ENDPOINT "" %>

      # Optional PKI configuration
      # If you want to easily generate client certificates and CAs, try the following projects:
      # https://github.com/cloudflare/cfssl
      # https://github.com/coreos/etcd-ca
      servername: <% default .Env.PKI_NOTIFIER_SERVER_NAME "" %>
      cafile: <% default .Env.PKI_NOTIFIER_CAFILE "" %>
      keyfile: <% default .Env.PKI_NOTIFIER_KEYFILE "" %>
      certfile: <% default .Env.PKI_NOTIFIER_CERTFILE "" %>

      # Optional HTTP Proxy: must be a valid URL (including the scheme).
      proxy: